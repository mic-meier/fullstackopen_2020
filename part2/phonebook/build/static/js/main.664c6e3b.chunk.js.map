{"version":3,"sources":["components/ContactForm.js","components/Notification.js","components/Persons.js","components/SearchField.js","services/persons.js","components/App.js","index.js"],"names":["ContactForm","props","onSubmit","addContact","value","newName","onChange","handleContactChange","newNumber","handleNumberChange","type","Notification","notificationClass","notificationMessage","className","Persons","persons","filter","person","name","toUpperCase","includes","searchName","map","key","id","number","onClick","handleDeletePerson","SearchField","handleSearchNameChange","baseUrl","axios","get","then","res","data","newObject","post","delete","put","App","useState","setPersons","setNewName","setNewNumber","setNotificationClass","setNotificationMessage","setSearchName","useEffect","personService","initialPersons","event","target","preventDefault","personObject","window","confirm","returnedPerson","setTimeout","catch","error","concat","response","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.664c6e3b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst ContactForm = props => {\n  return (\n    <form onSubmit={props.addContact}>\n      <div>\n        Name:{\" \"}\n        <input value={props.newName} onChange={props.handleContactChange} />\n      </div>\n      <div>\n        Number:{\" \"}\n        <input value={props.newNumber} onChange={props.handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">Add</button>\n      </div>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import React from \"react\";\n\nconst Notification = ({ notificationClass, notificationMessage }) => {\n  if (notificationMessage === null) {\n    return null;\n  }\n\n  return <div className={notificationClass}>{notificationMessage}</div>;\n};\n\nexport default Notification;\n","import React from \"react\";\n\nconst Persons = props => {\n  return (\n    <div>\n      {props.persons\n        .filter(person =>\n          person.name.toUpperCase().includes(props.searchName.toUpperCase())\n        )\n        .map(person => (\n          <div key={person.id}>\n            {person.name} {person.number}\n            <button\n              onClick={() => props.handleDeletePerson(person.id, person.name)}\n            >\n              Delete\n            </button>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Persons;\n","import React from \"react\";\n\nconst SearchField = props => {\n  return (\n    <div>\n      Search:{\" \"}\n      <input value={props.searchName} onChange={props.handleSearchNameChange} />\n    </div>\n  );\n};\n\nexport default SearchField;\n","import axios from \"axios\";\nconst baseUrl = \"/api/contacts\";\n\nconst getAll = () => {\n  const req = axios.get(baseUrl);\n  return req.then(res => res.data);\n};\n\nconst create = newObject => {\n  const req = axios.post(baseUrl, newObject);\n  return req.then(res => res.data);\n};\n\nconst deletePerson = id => {\n  const req = axios.delete(`${baseUrl}/${id}`);\n  return req.then(res => res.data);\n};\n\nconst updateNumber = (id, newObject) => {\n  const req = axios.put(`${baseUrl}/${id}`, newObject);\n  return req.then(res => res.data);\n};\n\nexport default {\n  getAll,\n  create,\n  deletePerson,\n  updateNumber\n};\n","import React, { useState, useEffect } from \"react\";\nimport ContactForm from \"./ContactForm\";\nimport Notification from \"./Notification\";\nimport Persons from \"./Persons\";\nimport SearchField from \"./SearchField\";\nimport personService from \"../services/persons\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [notificationClass, setNotificationClass] = useState(\"notification\");\n  const [notificationMessage, setNotificationMessage] = useState(null);\n  const [searchName, setSearchName] = useState(\"\");\n\n  useEffect(() => {\n    personService.getAll().then(initialPersons => {\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  const handleSearchNameChange = event => {\n    setSearchName(event.target.value);\n  };\n\n  const handleContactChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleDeleteperson = (id, name) => {\n    window.confirm(`Delete contact ${name}?`);\n    personService.deletePerson(id).then(() => {\n      setPersons(persons.filter(person => person.id !== id));\n    });\n  };\n\n  const addContact = event => {\n    event.preventDefault();\n    const personObject = {\n      name: newName,\n      number: newNumber\n    };\n\n    if (persons.map(person => person.name).includes(newName)) {\n      window.confirm(\n        `${newName} is already in your phonebook. Update phone number?`\n      );\n      const id = persons.filter(person => person.name.includes(newName))[0].id;\n      personService\n        .updateNumber(id, personObject)\n        .then(returnedPerson => {\n          setPersons(\n            persons.map(person => (person.id !== id ? person : returnedPerson))\n          );\n          setNotificationClass(\"notification\");\n          setNotificationMessage(`Contact \"${personObject.name}\" was updated.`);\n          setTimeout(() => {\n            setNotificationMessage(null);\n          }, 2000);\n          setNewName(\"\");\n          setNewNumber(\"\");\n        })\n        .catch(error => {\n          setNotificationClass(\"error\");\n          setNotificationMessage(\n            `Contact ${id} was already deleted from the server`\n          );\n          setTimeout(() => {\n            setNotificationMessage(null);\n          }, 2000);\n          setPersons(persons.filter(person => person.id !== id));\n        });\n    } else {\n      personService\n        .create(personObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson));\n          setNotificationClass(\"notification\");\n          setNotificationMessage(\n            `${personObject.name} was added to your contacts.`\n          );\n          setTimeout(() => {\n            setNotificationMessage(null);\n          }, 2000);\n          setNewName(\"\");\n          setNewNumber(\"\");\n        })\n        .catch(error => {\n          setNotificationClass(\"error\");\n          setNotificationMessage(error.response.data.error);\n          setTimeout(() => {\n            setNotificationMessage(null);\n          }, 2000);\n          setNewName(\"\");\n          setNewNumber(\"\");\n        });\n    }\n  };\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification\n        notificationClass={notificationClass}\n        notificationMessage={notificationMessage}\n      />\n      <SearchField\n        searchName={searchName}\n        handleSearchNameChange={handleSearchNameChange}\n      />\n      <h2>Add new contact</h2>\n      <ContactForm\n        addContact={addContact}\n        newName={newName}\n        handleContactChange={handleContactChange}\n        newNumber={newNumber}\n        handleNumberChange={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons\n        persons={persons}\n        searchName={searchName}\n        handleDeletePerson={handleDeleteperson}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}